@model List<Projet2_EasyFid.Models.MissionUser>
@{
    Layout = "_Layout";
    ViewBag.Title = "Création UserFeedback";
}

<h2>Page des Userfeedback</h2>

@using (Html.BeginForm("SeeCurrentUserFeedback", "Salarie", FormMethod.Post))
{
        @*Le modèle est une liste de MissionUser, on va pouvoir s'en servir pour boucler dessus*@
    @for (int i = 0; i < Model.Count; i++)
    {
            @*i est le compteur de la boucle. Il permet de cibler directement ce qui nous interesse dans notre modèle (qui est une liste)
              Au premier tour de boucle, i = 0, donc Model[i].Mission.Name va récupérer le nom de la première mission de notre liste (à l'index 0)*@
        <div name=@Model[i].Mission.Name>
            <h3>@Model[i].Mission.Name</h3>
            @*On utilise ici des HiddenFor pour garder en mémoire les Id de chaque MissionUser et de chaque UserFeedback à la validation du formulaire*@
            @Html.HiddenFor(m => m[i].UserFeedbackId)
            @Html.HiddenFor(m => m[i].Id)
            @*On utilise le compteur i pour créer des labels et des noms d'input dynamiques*@
            @Html.Label("comment-" + i, "Commentaire sur la mission")
            @Html.TextAreaFor(m => m[i].UserFeedback.Comment, new { @Name = "comment" + i })
            @{
                @*On utilise ici des TempData pour transmettre des variables temporaires à notre vue partielle qui nous servira à faire apparaitre les étoiles
                  On garde en mémoire ici le compteur de la première boucle car nous en auront besoin pour cibler un élément en particulier dans le script Javascript*@
                TempData["tour"] = i;
                @*On instancie 4 variables avec une ternaire, qui permet de donner des variables temporaires à notre vue partielle
                  Ces variables seront utilisées pour déterminer le nombre d'étoiles remplies ou vides*@
                int gradeClientRelation = (Model[i].UserFeedback != null) ? Model[i].UserFeedback.GradeClientRelation : 0;
                int gradeMission = (Model[i].UserFeedback != null) ? Model[i].UserFeedback.GradeMission : 0;
                int gradeManager = (Model[i].UserFeedback != null) ? Model[i].UserFeedback.GradeManager : 0;
                int gradeUserComfort = (Model[i].UserFeedback != null) ? Model[i].UserFeedback.GradeUserComfort : 0;
            }
            <div name="missionGrade" id="missionGrade">
                @Html.Label("gradeMission-" + i, "Note Mission")
                @{
                    @*La variable temporaire intKey servira de condition pour déterminer si l'étoile doit être pleine ou non
                      La variable temporaire category sert à rendre les id dynamiques en plus d'être utilisé dans le script*@
                    TempData["intKey"] = gradeMission;
                    TempData["category"] = "mission";
                }

                @Html.Partial("GoldenStars")
                @*Cet input est caché, mais dispose comme valeur de la note actuelle. Cette valeur changera grâce au script Javascript*@
                @Html.TextBoxFor(m => m[i].UserFeedback.GradeMission, new { id = "mission" + i, @class = "hidden" })
            </div>

            <div name="managerGrade" id="managerGrade">
                @Html.Label("gradeManager-" + i, "Note Manager")
                @{
                    TempData["intKey"] = gradeManager;
                    TempData["category"] = "manager";
                }
                @Html.Partial("GoldenStars")
                @Html.TextBoxFor(m => m[i].UserFeedback.GradeManager, new { id = "manager" + i, @class = "hidden" })
            </div>

            <div name="clientRelationGrade" id="clientRelationGrade">
                @Html.Label("gradeClientRelation-" + i, "Note Relation Client")
                @{
                    TempData["intKey"] = gradeClientRelation;
                    TempData["category"] = "clientRelation";
                }
                @Html.Partial("GoldenStars")
                @Html.TextBoxFor(m => m[i].UserFeedback.GradeClientRelation, new { id = "clientRelation" + i, @class = "hidden" })
            </div>

            <div name="userComfortGrade" id="userComfortGrade">
                @Html.Label("gradeUserComfort-" + i, "Note Confort Utilisateur")
                @{
                    TempData["intKey"] = gradeUserComfort;
                    TempData["category"] = "userComfort";
                }
                @Html.Partial("GoldenStars")
                @Html.TextBoxFor(m => m[i].UserFeedback.GradeUserComfort, new { id = "userComfort" + i, @class = "hidden" })
            </div>
        </div>
    }
    <input type="submit" value="Valider" />
}

@section Scripts {
    <script src="/Scripts/GradeScript.js"></script>
}